---
name: Build and Release

on:
  push:
    tags:
      - "*"

env:
  PACKER_OUTPUT: packer/outputs/debian12-virtualbox-amd64/debian12-virtualbox.box
  REGISTRY: pluggero
  BOX_NAME: debian12-ansible
  SHORT_DESCRIPTION: Debian12 Vagrant box for Ansible Role Testing.
  PROVIDER: virtualbox
  ARCHITECTURE: amd64
  VBOX_BRANCH: "7.1"
  VBOX_VERSION: "7.1.12"
  # The build ID can be found in the URL of the VirtualBox iso file: https://download.virtualbox.org/virtualbox/
  VBOX_BUILD_ID: "169651"
  VBOX_DEB_DISTRO: "Ubuntu"
  VBOX_DEB_CODENAME: "noble"

jobs:
  build:
    name: Build Vagrant Box
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232 # v3

      - name: Check and install VirtualBox
        run: |
          if ! VBoxManage --version | grep -q "${VBOX_VERSION}"; then
            echo "Installing VirtualBox ${VBOX_VERSION}..."
            wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc \
              | sudo gpg --dearmor --yes -o /usr/share/keyrings/oracle-virtualbox-2016.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] \
              http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" \
              | sudo tee /etc/apt/sources.list.d/virtualbox.list
            sudo apt update
            sudo apt install -y linux-headers-$(uname -r) dkms
            VBOX_DEB_FILE="virtualbox-${VBOX_BRANCH}_${VBOX_VERSION}-${VBOX_BUILD_ID}~${VBOX_DEB_DISTRO}~${VBOX_DEB_CODENAME}_amd64.deb"
            wget "https://download.virtualbox.org/virtualbox/${VBOX_VERSION}/${VBOX_DEB_FILE}" -O /tmp/virtualbox.deb
            sudo apt install -y /tmp/virtualbox.deb
          else
            echo "Correct VirtualBox version already installed."
          fi

      - name: Ensure USER and LOGNAME environment
        run: |
          echo "USER=$(whoami)" >> $GITHUB_ENV
          echo "LOGNAME=$(whoami)" >> $GITHUB_ENV

      - name: Verify VirtualBox installation
        run: VBoxManage --version

      - name: Make builder script executable
        run: chmod +x ./scripts/debian12_builder.sh

      - name: Build the Vagrant box
        run: ./scripts/debian12_builder.sh

      - name: Verify box file created
        run: |
          if [ ! -f "${{ env.PACKER_OUTPUT }}" ]; then
            echo "❌ Box file not found!"
            exit 1
          fi
          echo "✅ Box file found: ${{ env.PACKER_OUTPUT }}"

      - name: Upload box artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: vagrant-box
          path: ${{ env.PACKER_OUTPUT }}

  release:
    name: Release to HashiCorp Cloud
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Download box artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: vagrant-box
          path: ./box

      - name: Set Release Version
        id: set_version
        run: echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Read tag message
        id: tag_message
        run: |
          git tag -d ${GITHUB_REF_NAME} || true
          git fetch --prune --unshallow --tags
          TAG_MESSAGE=$(git for-each-ref --format='%(contents:subject)' refs/tags/${GITHUB_REF_NAME})
          TAG_MESSAGE="${TAG_MESSAGE:-Release version ${GITHUB_REF_NAME}}"
          echo "tag_message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Authenticate to HCP
        id: hcp_auth
        run: |
          set -euo pipefail

          echo "Authenticating to HashiCorp Cloud Platform (HCP)..."

          response=$(curl --silent --location "https://auth.idp.hashicorp.com/oauth2/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id=${{ secrets.HCP_CLIENT_ID }}" \
            --data-urlencode "client_secret=${{ secrets.HCP_CLIENT_SECRET }}" \
            --data-urlencode "grant_type=client_credentials" \
            --data-urlencode "audience=https://api.cloud.hashicorp.com")

          token=$(echo "$response" | jq -r .access_token)

          if [[ -z "$token" || "$token" == "null" ]]; then
            echo "Error: Failed to retrieve access token from HCP authentication response."
            echo "Response was: $response"
            exit 1
          fi

          echo "::add-mask::$token"
          echo "token=$token" >> $GITHUB_OUTPUT

          echo "Authentication successful."

      - name: Prepare box upload
        id: prepare_box
        run: |
          set -euo pipefail

          ACCESS_TOKEN="${{ steps.hcp_auth.outputs.token }}"
          BOX_NAME="${{ env.BOX_NAME }}"
          VERSION="${{ steps.set_version.outputs.version }}"
          PROVIDER="${{ env.PROVIDER }}"
          ARCHITECTURE="${{ env.ARCHITECTURE }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"

          echo "Starting box preparation..."

          echo "Checking if box '$BOX_NAME' exists..."

          response=$(curl --silent --header "Authorization: Bearer $ACCESS_TOKEN" \
              --url "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}")

          if echo "$response" | grep -q '"code":5'; then
            echo "Box does not exist. Creating box '$BOX_NAME'..."
            curl --silent --fail --request POST --header "Authorization: Bearer $ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              --data '{"name":"'"$BOX_NAME"'","description":"'"$REPO_URL"'","short_description":"'"$SHORT_DESCRIPTION"'","is_private":false}' \
              "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/boxes" | jq .
            echo "Box created."
          else
            echo "Box already exists."
          fi

          echo
          echo "Checking if version '$VERSION' exists for box '$BOX_NAME'..."

          version_response=$(curl --silent \
              --url "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/version/${VERSION}/provider/${PROVIDER}/architecture/${ARCHITECTURE}/download")

          if echo "$version_response" | grep -q '"code":5'; then
            echo "Version does not exist. Creating version '$VERSION'..."
            curl --silent --fail --request POST --header "Authorization: Bearer $ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              --data '{"name":"'"$VERSION"'","description":"'"${{ steps.tag_message.outputs.tag_message }}"' (VirtualBox version: '"$VBOX_VERSION"')","provider_names":["'"$PROVIDER"'"]}' \
              "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/versions" | jq .
            echo "Version created."

            echo
            echo "Creating provider '$PROVIDER'..."
            curl --silent --fail --request POST --header "Authorization: Bearer $ACCESS_TOKEN" \
              --url "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/version/${VERSION}/providers" \
              --header "Content-Type: application/json" \
              --data '{
                "name": "'"$PROVIDER"'",
                "summary": {
                  "architectures_count": 1
                },
                "architecture_types": ["'"$ARCHITECTURE"'"]
              }' | jq .
            echo "Provider created."

            echo
            echo "Calculating box checksum..."
            checksum=$(sha256sum ./box/debian12-virtualbox.box | awk '{print $1}')
            echo "Checksum: $checksum"

            echo
            echo "Creating architecture '$ARCHITECTURE'..."
            curl --silent --fail --request POST --header "Authorization: Bearer $ACCESS_TOKEN" \
              --url "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/version/${VERSION}/provider/${PROVIDER}/architectures" \
              --header "Content-Type: application/json" \
              --data '{
                "architecture_type": "'"$ARCHITECTURE"'",
                "default": true,
                "box_data": {
                  "checksum": "'"$checksum"'",
                  "checksum_type": "SHA256",
                  "size": "'$(stat --format="%s" ./box/debian12-virtualbox.box)'",
                  "created_at": "'"$(date --utc +"%Y-%m-%dT%H:%M:%SZ")"'",
                  "updated_at": "'"$(date --utc +"%Y-%m-%dT%H:%M:%SZ")"'"
                }
              }' | jq .
            echo "Architecture created."

            echo "skip_upload=false" >> $GITHUB_OUTPUT
          else
            echo "Version already exists."
            echo "skip_upload=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload box
        if: steps.prepare_box.outputs.skip_upload == 'false'
        run: |
          set -euo pipefail

          ACCESS_TOKEN="${{ steps.hcp_auth.outputs.token }}"
          BOX_NAME="${{ env.BOX_NAME }}"
          VERSION="${{ steps.set_version.outputs.version }}"
          PROVIDER="${{ env.PROVIDER }}"
          ARCHITECTURE="${{ env.ARCHITECTURE }}"

          echo "Starting upload of box '$BOX_NAME' version '$VERSION'..."

          echo
          echo "Fetching upload URL..."
          response=$(curl --silent --header "Authorization: Bearer $ACCESS_TOKEN" \
            "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/version/${VERSION}/provider/${PROVIDER}/architecture/${ARCHITECTURE}/upload")

          upload_url=$(echo "$response" | jq -r .url)

          if [[ -z "$upload_url" || "$upload_url" == "null" ]]; then
            echo "Error: Failed to retrieve upload URL."
            echo "Response was: $response"
            exit 1
          fi

          echo "Upload URL retrieved."

          echo
          echo "Uploading box file..."
          curl --fail --request PUT --upload-file ./box/debian12-virtualbox.box "$upload_url"
          echo "Box upload completed."

          echo
          echo "Finalizing release..."
          curl --silent --fail --request PUT \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            "https://api.cloud.hashicorp.com/vagrant/2022-09-30/registry/${REGISTRY}/box/${BOX_NAME}/version/${VERSION}/release"

          echo
          echo "Box version released successfully!"
